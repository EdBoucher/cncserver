/**
 * @file Abstraction for high level action rendering, management, execution.
 */
const actions = {}; // Exposed export.

module.exports = (cncserver) => {
  actions.projects = [];
  actions.items = [];
  actions.hashToIndex = {};

  actions.getAll = () => Object.keys(actions.hashToIndex);

  // Enumerate all valid action options.
  // TODO: This likely should follow some kind of valid formating or be
  // generated by child modules.
  actions.getOptions = () => ({
    operations: {
      fill: {
        types: {
          hatch: {
            default: true,
            settings: {

            },
          },
          pattern: {
            settings: {

            },
          },
          offset: {
            settings: {

            },
          },
        },
      },
      stroke: {
        types: {
          solid: {
            default: true,
          },
          dashed: {
            settings: {
              dashArray: [5, 5],
            },
          },
        },
      },
      text: {
        settings: cncserver.drawing.text.defaultSettings,
        fonts: cncserver.drawing.text.fonts,
      },
    },
    bounds: cncserver.drawing.base.defaultBounds(),
  });

  actions.addChild = (parent, payload) => {
    if (actions.hashToIndex[parent]) {

    }
  };

  // Manage project or job creation into tasks & instructions.
  actions.addItem = (payload) => {
    const hash = cncserver.utils.getHash(payload);
    const {
      type, parent, body, operation, bounds, parkAfter, settings,
    } = payload;

    const item = {
      status: 'ready',
      hash,
      bounds,
      operation,
      parent,
      type,
      body,
    };

    // Actually render paths into drawing movements.
    if (type === 'drawpreview') {
      cncserver.control.renderPathsToMoves();
      return { status: 'processing' };
    }

    if (type === 'job') {
      switch (operation) {
        case 'trace':
          cncserver.drawing.trace(body, parent, bounds);
          break;

        case 'fill':
          // CLEAR the preview canvas for every job/project.
          // cncserver.drawing.base.layers.preview.removeChildren();
          cncserver.drawing.fill(body, hash, null, bounds, settings);
          break;

        case 'text':
          cncserver.drawing.text.draw(hash, payload);
          break;

        default:
          break;
      }
    } else if (type === 'project') {
      if (['trace', 'fill', 'full'].includes(operation)) {
        cncserver.drawing.project(body, parent, operation, bounds);
      }
    } else {
      return {
        status: 'error',
        message: 'invalid action type: must be job or project',
      };
    }

    // TODO: is this the right place for this?
    if (parkAfter) {
      cncserver.pen.park();
    }

    actions.hashToIndex[hash] = actions.items.length;
    actions.items.push(item);

    return item;
  };

  // Get a job based on the hash.
  actions.getItem = (hash) => {
    let job = null;
    const index = actions.hashToIndex[hash];
    if (index) {
      job = actions.items[index];
    }

    return job;
  };

  // Get a job based on the hash.
  actions.removeItem = (hash) => {
    let job = null;
    const index = actions.hashToIndex[hash];
    if (index) {
      job = actions.items[index];
      job.status = 'deleted';
    }
  };

  return actions;
};
